package game;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

public class Ship extends Polygon implements KeyListener {
	private Point[] shipPoints;
	private int stepSize = 3;
	private boolean forward;
	private boolean right;
	private boolean left;
	private boolean down;
	private int rotate;
	
	class Boost extends Polygon implements KeyListener {
		
		private Point[] boostPoints; 
		private boolean boost; 
		private Ship ship; 
		
		public Boost(Point[] inShape, Point inPosition, double inRotation, Ship ship) {
			super(inShape, inPosition, inRotation);
			this.boostPoints = inShape;
			this.ship = ship; 
		}
		
		public void Paint(Graphics brush) {
			Point[] getPoints = this.getPoints();
			
			
			int[] xArray = new int[getPoints.length];
			int[] yArray = new int[getPoints.length];
			
			for(int i = 0; i < getPoints.length; i++) {
				xArray[i] = (int)getPoints[i].getX();
				yArray[i] = (int)getPoints[i].getY();
			}
			brush.setColor(Color.ORANGE);
			brush.drawPolygon(xArray, yArray, getPoints.length);
			brush.fillPolygon(xArray, yArray, getPoints.length);
		}
		
		@Override
		public void keyPressed(KeyEvent e) {
			int keyCode = e.getKeyCode();
			
			if(keyCode == KeyEvent.VK_Z) {
				boost = true;
			}
		}

		@Override
		public void keyReleased(KeyEvent e) {
			int keyCode = e.getKeyCode();
			
			if(keyCode == KeyEvent.VK_Z) {
				boost = false;
			}
		}

		@Override
		public void keyTyped(KeyEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		public void boost() {
			if(boost) {
				position.setX(ship.getXPosition());
		        position.setY(ship.getYPosition());
			}
			else {
				position.setX(-15); 
				position.setY(-15);
			}
		}
		
		public boolean returnBoost() {
			return boost; 
		}
	}
	
	public Ship(Point[] inShape, Point inPosition, double inRotation) {
		super(inShape, inPosition, inRotation);
		this.shipPoints = inShape;
		
	}
	
	void Paint(Graphics brush) {
		
		Point[] getPoints = this.getPoints();
		
		
		int[] xArray = new int[getPoints.length];
		int[] yArray = new int[getPoints.length];
		
		for(int i = 0; i < getPoints.length; i++) {
			xArray[i] = (int)getPoints[i].getX();
			yArray[i] = (int)getPoints[i].getY();
		}
		brush.setColor(Color.RED);
		brush.drawPolygon(xArray, yArray, getPoints.length);
		brush.fillPolygon(xArray, yArray, getPoints.length);
	}
	
	public void move() {
		if(forward) { 
			if(position.getX() >= 800) {
				position.setX(799);
				position.setY(position.getY() - stepSize * Math.sin(Math.toRadians(rotation)));
			}
			else if(position.getX() <= 0) {
				position.setX(1);
				position.setY(position.getY() - stepSize * Math.sin(Math.toRadians(rotation)));
			}
			else if(position.getY() >= 570) {
				position.setX(position.getX() - stepSize * Math.cos(Math.toRadians(rotation)));
				position.setY(569);
			}
			else if(position.getY() <= 0) {
				position.setX(position.getX() - stepSize * Math.cos(Math.toRadians(rotation)));
				position.setY(1);
			}
			else {
				position.setX(position.getX() - stepSize * Math.cos(Math.toRadians(rotation)));
				position.setY(position.getY() - stepSize * Math.sin(Math.toRadians(rotation)));
			}
		}
		if(left) { 
			rotate(-2);
			
		}
		if(right) { 
			rotate(2);
		}

		
	}
	
	public Point[] getPArray() {
		return shipPoints;
	}

	public void setPosition(int x, int y) {
		position.setX(x);
		position.setY(y);
	}
	
	@Override
	public void keyPressed(KeyEvent e) {
		int keyCode = e.getKeyCode();
		
		if(keyCode == KeyEvent.VK_UP) {
			forward = true;
		}
		if(keyCode == KeyEvent.VK_LEFT) {
			left = true;
			
		}
		if(keyCode == KeyEvent.VK_RIGHT) {
			right = true;
		}	
		if(keyCode == KeyEvent.VK_DOWN) {
			down = true;
		}
		
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		int keyCode = e.getKeyCode();
		if(keyCode == KeyEvent.VK_UP) {
			forward = false;
		}
		if(keyCode == KeyEvent.VK_LEFT) {
			left = false;
		}
		if(keyCode == KeyEvent.VK_RIGHT) {
			right = false;
		}
		if(keyCode == KeyEvent.VK_DOWN) {
			down = false;
		}
		
	}

	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	public void setStepSize(int x) {
		stepSize = x; 
	}
	
	public double getXPosition() {
		return position.getX(); 
	}
	
	public double getYPosition() {
		return position.getY(); 
	}
	
}
